//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Kariuomene
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Kariuomene.Kariuomene_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Kariuomene.Kariuomene_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[22];
            _typeNameTable[0] = "RateMyApp.Controls.FeedbackOverlay";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[2] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[3] = "String";
            _typeNameTable[4] = "Windows.UI.Xaml.Visibility";
            _typeNameTable[5] = "Boolean";
            _typeNameTable[6] = "TimeSpan";
            _typeNameTable[7] = "System.ValueType";
            _typeNameTable[8] = "Object";
            _typeNameTable[9] = "Int32";
            _typeNameTable[10] = "Kariuomene.HubPage";
            _typeNameTable[11] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[12] = "Kariuomene.Common.NavigationHelper";
            _typeNameTable[13] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[14] = "Kariuomene.Common.ObservableDictionary";
            _typeNameTable[15] = "Kariuomene.Pages.AboutPage";
            _typeNameTable[16] = "Kariuomene.Pages.DepartmentPage";
            _typeNameTable[17] = "Kariuomene.Pages.KurKreiptis";
            _typeNameTable[18] = "Kariuomene.Pages.Naujiena";
            _typeNameTable[19] = "Kariuomene.Pages.RegionListPage";
            _typeNameTable[20] = "Kariuomene.Pages.SearchDetailsPage";
            _typeNameTable[21] = "Kariuomene.Pages.SearchPage";

            _typeTable = new global::System.Type[22];
            _typeTable[0] = typeof(global::RateMyApp.Controls.FeedbackOverlay);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[3] = typeof(global::System.String);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.Visibility);
            _typeTable[5] = typeof(global::System.Boolean);
            _typeTable[6] = typeof(global::System.TimeSpan);
            _typeTable[7] = typeof(global::System.ValueType);
            _typeTable[8] = typeof(global::System.Object);
            _typeTable[9] = typeof(global::System.Int32);
            _typeTable[10] = typeof(global::Kariuomene.HubPage);
            _typeTable[11] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[12] = typeof(global::Kariuomene.Common.NavigationHelper);
            _typeTable[13] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[14] = typeof(global::Kariuomene.Common.ObservableDictionary);
            _typeTable[15] = typeof(global::Kariuomene.Pages.AboutPage);
            _typeTable[16] = typeof(global::Kariuomene.Pages.DepartmentPage);
            _typeTable[17] = typeof(global::Kariuomene.Pages.KurKreiptis);
            _typeTable[18] = typeof(global::Kariuomene.Pages.Naujiena);
            _typeTable[19] = typeof(global::Kariuomene.Pages.RegionListPage);
            _typeTable[20] = typeof(global::Kariuomene.Pages.SearchDetailsPage);
            _typeTable[21] = typeof(global::Kariuomene.Pages.SearchPage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_FeedbackOverlay() { return new global::RateMyApp.Controls.FeedbackOverlay(); }
        private object Activate_10_HubPage() { return new global::Kariuomene.HubPage(); }
        private object Activate_14_ObservableDictionary() { return new global::Kariuomene.Common.ObservableDictionary(); }
        private object Activate_15_AboutPage() { return new global::Kariuomene.Pages.AboutPage(); }
        private object Activate_16_DepartmentPage() { return new global::Kariuomene.Pages.DepartmentPage(); }
        private object Activate_17_KurKreiptis() { return new global::Kariuomene.Pages.KurKreiptis(); }
        private object Activate_18_Naujiena() { return new global::Kariuomene.Pages.Naujiena(); }
        private object Activate_19_RegionListPage() { return new global::Kariuomene.Pages.RegionListPage(); }
        private object Activate_20_SearchDetailsPage() { return new global::Kariuomene.Pages.SearchDetailsPage(); }
        private object Activate_21_SearchPage() { return new global::Kariuomene.Pages.SearchPage(); }
        private void MapAdd_14_ObservableDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Kariuomene.Kariuomene_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  RateMyApp.Controls.FeedbackOverlay
                userType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_FeedbackOverlay;
                userType.AddMemberName("Background");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("LanguageOverride");
                userType.AddMemberName("FeedbackTo");
                userType.AddMemberName("ApplicationName");
                userType.AddMemberName("CompanyName");
                userType.AddMemberName("VisibilityForDesign");
                userType.AddMemberName("EnableAnimation");
                userType.AddMemberName("AnimationDuration");
                userType.AddMemberName("IsVisible");
                userType.AddMemberName("IsNotVisible");
                userType.AddMemberName("RatingTitle");
                userType.AddMemberName("RatingMessage1");
                userType.AddMemberName("RatingMessage2");
                userType.AddMemberName("RatingYes");
                userType.AddMemberName("RatingNo");
                userType.AddMemberName("FeedbackTitle");
                userType.AddMemberName("FeedbackMessage1");
                userType.AddMemberName("FeedbackYes");
                userType.AddMemberName("FeedbackNo");
                userType.AddMemberName("FeedbackSubject");
                userType.AddMemberName("FeedbackBody");
                userType.AddMemberName("FirstCount");
                userType.AddMemberName("SecondCount");
                userType.AddMemberName("CountDays");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  String
                xamlType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Windows.UI.Xaml.Visibility
                xamlType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Boolean
                xamlType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  TimeSpan
                userType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 7:   //  System.ValueType
                userType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 8:   //  Object
                xamlType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Int32
                xamlType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Kariuomene.HubPage
                userType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_10_HubPage;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Kariuomene.Common.NavigationHelper
                userType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Kariuomene.Common.ObservableDictionary
                userType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.DictionaryAdd = MapAdd_14_ObservableDictionary;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  Kariuomene.Pages.AboutPage
                userType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_15_AboutPage;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  Kariuomene.Pages.DepartmentPage
                userType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_16_DepartmentPage;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Kariuomene.Pages.KurKreiptis
                userType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_17_KurKreiptis;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Kariuomene.Pages.Naujiena
                userType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_18_Naujiena;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Kariuomene.Pages.RegionListPage
                userType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_19_RegionListPage;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Kariuomene.Pages.SearchDetailsPage
                userType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_SearchDetailsPage;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Kariuomene.Pages.SearchPage
                userType = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_SearchPage;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::RateMyApp.RateMyAppXAML_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_FeedbackOverlay_Background(object instance)
        {
            var that = (global::RateMyApp.Controls.FeedbackOverlay)instance;
            return that.Background;
        }
        private void set_0_FeedbackOverlay_Background(object instance, object Value)
        {
            var that = (global::RateMyApp.Controls.FeedbackOverlay)instance;
            that.Background = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_1_FeedbackOverlay_Foreground(object instance)
        {
            var that = (global::RateMyApp.Controls.FeedbackOverlay)instance;
            return that.Foreground;
        }
        private void set_1_FeedbackOverlay_Foreground(object instance, object Value)
        {
            var that = (global::RateMyApp.Controls.FeedbackOverlay)instance;
            that.Foreground = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_2_FeedbackOverlay_LanguageOverride(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetLanguageOverride((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_2_FeedbackOverlay_LanguageOverride(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetLanguageOverride((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_3_FeedbackOverlay_FeedbackTo(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetFeedbackTo((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_3_FeedbackOverlay_FeedbackTo(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetFeedbackTo((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_4_FeedbackOverlay_ApplicationName(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetApplicationName((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_4_FeedbackOverlay_ApplicationName(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetApplicationName((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_5_FeedbackOverlay_CompanyName(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetCompanyName((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_5_FeedbackOverlay_CompanyName(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetCompanyName((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_6_FeedbackOverlay_VisibilityForDesign(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetVisibilityForDesign((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_6_FeedbackOverlay_VisibilityForDesign(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetVisibilityForDesign((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::Windows.UI.Xaml.Visibility)Value);
        }
        private object get_7_FeedbackOverlay_EnableAnimation(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetEnableAnimation((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_7_FeedbackOverlay_EnableAnimation(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetEnableAnimation((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.Boolean)Value);
        }
        private object get_8_FeedbackOverlay_AnimationDuration(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetAnimationDuration((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_8_FeedbackOverlay_AnimationDuration(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetAnimationDuration((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.TimeSpan)Value);
        }
        private object get_9_FeedbackOverlay_IsVisible(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetIsVisible((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_9_FeedbackOverlay_IsVisible(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetIsVisible((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.Boolean)Value);
        }
        private object get_10_FeedbackOverlay_IsNotVisible(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetIsNotVisible((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_10_FeedbackOverlay_IsNotVisible(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetIsNotVisible((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.Boolean)Value);
        }
        private object get_11_FeedbackOverlay_RatingTitle(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetRatingTitle((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_11_FeedbackOverlay_RatingTitle(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetRatingTitle((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_12_FeedbackOverlay_RatingMessage1(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetRatingMessage1((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_12_FeedbackOverlay_RatingMessage1(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetRatingMessage1((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_13_FeedbackOverlay_RatingMessage2(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetRatingMessage2((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_13_FeedbackOverlay_RatingMessage2(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetRatingMessage2((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_14_FeedbackOverlay_RatingYes(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetRatingYes((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_14_FeedbackOverlay_RatingYes(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetRatingYes((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_15_FeedbackOverlay_RatingNo(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetRatingNo((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_15_FeedbackOverlay_RatingNo(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetRatingNo((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_16_FeedbackOverlay_FeedbackTitle(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetFeedbackTitle((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_16_FeedbackOverlay_FeedbackTitle(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetFeedbackTitle((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_17_FeedbackOverlay_FeedbackMessage1(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetFeedbackMessage1((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_17_FeedbackOverlay_FeedbackMessage1(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetFeedbackMessage1((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_18_FeedbackOverlay_FeedbackYes(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetFeedbackYes((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_18_FeedbackOverlay_FeedbackYes(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetFeedbackYes((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_19_FeedbackOverlay_FeedbackNo(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetFeedbackNo((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_19_FeedbackOverlay_FeedbackNo(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetFeedbackNo((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_20_FeedbackOverlay_FeedbackSubject(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetFeedbackSubject((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_20_FeedbackOverlay_FeedbackSubject(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetFeedbackSubject((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_21_FeedbackOverlay_FeedbackBody(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetFeedbackBody((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_21_FeedbackOverlay_FeedbackBody(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetFeedbackBody((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.String)Value);
        }
        private object get_22_FeedbackOverlay_FirstCount(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetFirstCount((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_22_FeedbackOverlay_FirstCount(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetFirstCount((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.Int32)Value);
        }
        private object get_23_FeedbackOverlay_SecondCount(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetSecondCount((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_23_FeedbackOverlay_SecondCount(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetSecondCount((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.Int32)Value);
        }
        private object get_24_FeedbackOverlay_CountDays(object instance)
        {
            return global::RateMyApp.Controls.FeedbackOverlay.GetCountDays((global::RateMyApp.Controls.FeedbackOverlay)instance);
        }
        private void set_24_FeedbackOverlay_CountDays(object instance, object Value)
        {
            global::RateMyApp.Controls.FeedbackOverlay.SetCountDays((global::RateMyApp.Controls.FeedbackOverlay)instance, (global::System.Boolean)Value);
        }
        private object get_25_HubPage_NavigationHelper(object instance)
        {
            var that = (global::Kariuomene.HubPage)instance;
            return that.NavigationHelper;
        }
        private object get_26_HubPage_DefaultViewModel(object instance)
        {
            var that = (global::Kariuomene.HubPage)instance;
            return that.DefaultViewModel;
        }
        private object get_27_AboutPage_NavigationHelper(object instance)
        {
            var that = (global::Kariuomene.Pages.AboutPage)instance;
            return that.NavigationHelper;
        }
        private object get_28_AboutPage_DefaultViewModel(object instance)
        {
            var that = (global::Kariuomene.Pages.AboutPage)instance;
            return that.DefaultViewModel;
        }
        private object get_29_DepartmentPage_NavigationHelper(object instance)
        {
            var that = (global::Kariuomene.Pages.DepartmentPage)instance;
            return that.NavigationHelper;
        }
        private object get_30_DepartmentPage_DefaultViewModel(object instance)
        {
            var that = (global::Kariuomene.Pages.DepartmentPage)instance;
            return that.DefaultViewModel;
        }
        private object get_31_KurKreiptis_NavigationHelper(object instance)
        {
            var that = (global::Kariuomene.Pages.KurKreiptis)instance;
            return that.NavigationHelper;
        }
        private object get_32_KurKreiptis_DefaultViewModel(object instance)
        {
            var that = (global::Kariuomene.Pages.KurKreiptis)instance;
            return that.DefaultViewModel;
        }
        private object get_33_Naujiena_NavigationHelper(object instance)
        {
            var that = (global::Kariuomene.Pages.Naujiena)instance;
            return that.NavigationHelper;
        }
        private object get_34_Naujiena_DefaultViewModel(object instance)
        {
            var that = (global::Kariuomene.Pages.Naujiena)instance;
            return that.DefaultViewModel;
        }
        private object get_35_RegionListPage_NavigationHelper(object instance)
        {
            var that = (global::Kariuomene.Pages.RegionListPage)instance;
            return that.NavigationHelper;
        }
        private object get_36_RegionListPage_DefaultViewModel(object instance)
        {
            var that = (global::Kariuomene.Pages.RegionListPage)instance;
            return that.DefaultViewModel;
        }
        private object get_37_SearchDetailsPage_NavigationHelper(object instance)
        {
            var that = (global::Kariuomene.Pages.SearchDetailsPage)instance;
            return that.NavigationHelper;
        }
        private object get_38_SearchDetailsPage_DefaultViewModel(object instance)
        {
            var that = (global::Kariuomene.Pages.SearchDetailsPage)instance;
            return that.DefaultViewModel;
        }
        private object get_39_SearchPage_NavigationHelper(object instance)
        {
            var that = (global::Kariuomene.Pages.SearchPage)instance;
            return that.NavigationHelper;
        }
        private object get_40_SearchPage_DefaultViewModel(object instance)
        {
            var that = (global::Kariuomene.Pages.SearchPage)instance;
            return that.DefaultViewModel;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember xamlMember = null;
            global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "RateMyApp.Controls.FeedbackOverlay.Background":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "Background", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_FeedbackOverlay_Background;
                xamlMember.Setter = set_0_FeedbackOverlay_Background;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.Foreground":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "Foreground", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_FeedbackOverlay_Foreground;
                xamlMember.Setter = set_1_FeedbackOverlay_Foreground;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.LanguageOverride":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "LanguageOverride", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_2_FeedbackOverlay_LanguageOverride;
                xamlMember.Setter = set_2_FeedbackOverlay_LanguageOverride;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.FeedbackTo":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "FeedbackTo", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_3_FeedbackOverlay_FeedbackTo;
                xamlMember.Setter = set_3_FeedbackOverlay_FeedbackTo;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.ApplicationName":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "ApplicationName", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_4_FeedbackOverlay_ApplicationName;
                xamlMember.Setter = set_4_FeedbackOverlay_ApplicationName;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.CompanyName":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "CompanyName", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_5_FeedbackOverlay_CompanyName;
                xamlMember.Setter = set_5_FeedbackOverlay_CompanyName;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.VisibilityForDesign":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "VisibilityForDesign", "Windows.UI.Xaml.Visibility");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_6_FeedbackOverlay_VisibilityForDesign;
                xamlMember.Setter = set_6_FeedbackOverlay_VisibilityForDesign;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.EnableAnimation":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "EnableAnimation", "Boolean");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_7_FeedbackOverlay_EnableAnimation;
                xamlMember.Setter = set_7_FeedbackOverlay_EnableAnimation;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.AnimationDuration":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "AnimationDuration", "TimeSpan");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_8_FeedbackOverlay_AnimationDuration;
                xamlMember.Setter = set_8_FeedbackOverlay_AnimationDuration;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.IsVisible":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "IsVisible", "Boolean");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_9_FeedbackOverlay_IsVisible;
                xamlMember.Setter = set_9_FeedbackOverlay_IsVisible;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.IsNotVisible":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "IsNotVisible", "Boolean");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_10_FeedbackOverlay_IsNotVisible;
                xamlMember.Setter = set_10_FeedbackOverlay_IsNotVisible;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.RatingTitle":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "RatingTitle", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_11_FeedbackOverlay_RatingTitle;
                xamlMember.Setter = set_11_FeedbackOverlay_RatingTitle;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.RatingMessage1":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "RatingMessage1", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_12_FeedbackOverlay_RatingMessage1;
                xamlMember.Setter = set_12_FeedbackOverlay_RatingMessage1;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.RatingMessage2":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "RatingMessage2", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_13_FeedbackOverlay_RatingMessage2;
                xamlMember.Setter = set_13_FeedbackOverlay_RatingMessage2;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.RatingYes":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "RatingYes", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_14_FeedbackOverlay_RatingYes;
                xamlMember.Setter = set_14_FeedbackOverlay_RatingYes;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.RatingNo":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "RatingNo", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_15_FeedbackOverlay_RatingNo;
                xamlMember.Setter = set_15_FeedbackOverlay_RatingNo;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.FeedbackTitle":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "FeedbackTitle", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_16_FeedbackOverlay_FeedbackTitle;
                xamlMember.Setter = set_16_FeedbackOverlay_FeedbackTitle;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.FeedbackMessage1":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "FeedbackMessage1", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_17_FeedbackOverlay_FeedbackMessage1;
                xamlMember.Setter = set_17_FeedbackOverlay_FeedbackMessage1;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.FeedbackYes":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "FeedbackYes", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_18_FeedbackOverlay_FeedbackYes;
                xamlMember.Setter = set_18_FeedbackOverlay_FeedbackYes;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.FeedbackNo":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "FeedbackNo", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_19_FeedbackOverlay_FeedbackNo;
                xamlMember.Setter = set_19_FeedbackOverlay_FeedbackNo;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.FeedbackSubject":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "FeedbackSubject", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_20_FeedbackOverlay_FeedbackSubject;
                xamlMember.Setter = set_20_FeedbackOverlay_FeedbackSubject;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.FeedbackBody":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "FeedbackBody", "String");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_21_FeedbackOverlay_FeedbackBody;
                xamlMember.Setter = set_21_FeedbackOverlay_FeedbackBody;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.FirstCount":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "FirstCount", "Int32");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_22_FeedbackOverlay_FirstCount;
                xamlMember.Setter = set_22_FeedbackOverlay_FirstCount;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.SecondCount":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "SecondCount", "Int32");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_23_FeedbackOverlay_SecondCount;
                xamlMember.Setter = set_23_FeedbackOverlay_SecondCount;
                break;
            case "RateMyApp.Controls.FeedbackOverlay.CountDays":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "CountDays", "Boolean");
                xamlMember.SetTargetTypeName("RateMyApp.Controls.FeedbackOverlay");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_24_FeedbackOverlay_CountDays;
                xamlMember.Setter = set_24_FeedbackOverlay_CountDays;
                break;
            case "Kariuomene.HubPage.NavigationHelper":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.HubPage");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Kariuomene.Common.NavigationHelper");
                xamlMember.Getter = get_25_HubPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.HubPage.DefaultViewModel":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.HubPage");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Kariuomene.Common.ObservableDictionary");
                xamlMember.Getter = get_26_HubPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.Pages.AboutPage.NavigationHelper":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.Pages.AboutPage");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Kariuomene.Common.NavigationHelper");
                xamlMember.Getter = get_27_AboutPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.Pages.AboutPage.DefaultViewModel":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.Pages.AboutPage");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Kariuomene.Common.ObservableDictionary");
                xamlMember.Getter = get_28_AboutPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.Pages.DepartmentPage.NavigationHelper":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.Pages.DepartmentPage");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Kariuomene.Common.NavigationHelper");
                xamlMember.Getter = get_29_DepartmentPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.Pages.DepartmentPage.DefaultViewModel":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.Pages.DepartmentPage");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Kariuomene.Common.ObservableDictionary");
                xamlMember.Getter = get_30_DepartmentPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.Pages.KurKreiptis.NavigationHelper":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.Pages.KurKreiptis");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Kariuomene.Common.NavigationHelper");
                xamlMember.Getter = get_31_KurKreiptis_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.Pages.KurKreiptis.DefaultViewModel":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.Pages.KurKreiptis");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Kariuomene.Common.ObservableDictionary");
                xamlMember.Getter = get_32_KurKreiptis_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.Pages.Naujiena.NavigationHelper":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.Pages.Naujiena");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Kariuomene.Common.NavigationHelper");
                xamlMember.Getter = get_33_Naujiena_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.Pages.Naujiena.DefaultViewModel":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.Pages.Naujiena");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Kariuomene.Common.ObservableDictionary");
                xamlMember.Getter = get_34_Naujiena_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.Pages.RegionListPage.NavigationHelper":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.Pages.RegionListPage");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Kariuomene.Common.NavigationHelper");
                xamlMember.Getter = get_35_RegionListPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.Pages.RegionListPage.DefaultViewModel":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.Pages.RegionListPage");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Kariuomene.Common.ObservableDictionary");
                xamlMember.Getter = get_36_RegionListPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.Pages.SearchDetailsPage.NavigationHelper":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.Pages.SearchDetailsPage");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Kariuomene.Common.NavigationHelper");
                xamlMember.Getter = get_37_SearchDetailsPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.Pages.SearchDetailsPage.DefaultViewModel":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.Pages.SearchDetailsPage");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Kariuomene.Common.ObservableDictionary");
                xamlMember.Getter = get_38_SearchDetailsPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.Pages.SearchPage.NavigationHelper":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.Pages.SearchPage");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "NavigationHelper", "Kariuomene.Common.NavigationHelper");
                xamlMember.Getter = get_39_SearchPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "Kariuomene.Pages.SearchPage.DefaultViewModel":
                userType = (global::Kariuomene.Kariuomene_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Kariuomene.Pages.SearchPage");
                xamlMember = new global::Kariuomene.Kariuomene_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "Kariuomene.Common.ObservableDictionary");
                xamlMember.Getter = get_40_SearchPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Kariuomene.Kariuomene_XamlTypeInfo.XamlSystemBaseType
    {
        global::Kariuomene.Kariuomene_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Kariuomene.Kariuomene_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Kariuomene.Kariuomene_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Kariuomene.Kariuomene_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


